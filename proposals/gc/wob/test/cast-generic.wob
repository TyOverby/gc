// @FLAGS -b
// @FAIL-WASM

// Generic classes

class A<T, U>() {};
class B<T, U>() <: A<T, U>() {};
class C<T>() <: B<Bool, (T, T)>() {};
class D() <: B<Int, Float>() {};
class E<X>() <: D() {};

let a : Object = new A<Int, Float>();
let b : Object = new B<Int, Float>();
let c : Object = new C<Text>();
let d : Object = new D();
let e : Object = new E<Int>();

assert a :> A<Int, Float> == a;
assert a :> A<Int, Bool> == null;
assert a :> B<Int, Float> == null;
assert a :> B<Int, Bool> == null;
assert a :> D == null;
assert a :> E<Int> == null;

assert b :> A<Int, Float> == b;
assert b :> A<Int, Bool> == null;
assert b :> B<Int, Float> == b;
assert b :> B<Int, Bool> == null;
assert b :> D == null;
assert b :> E<Int> == null;

assert c :> A<Bool, (Text, Text)> == c;
assert c :> A<Bool, (Int, Int)> == null;
assert c :> C<Text> == c;
assert c :> C<Bool> == null;

assert d :> A<Int, Float> == d;
assert d :> A<Int, Bool> == null;
assert d :> B<Int, Float> == d;
assert d :> B<Int, Bool> == null;
assert d :> D == d;
assert d :> E<Int> == null;

assert e :> A<Int, Float> == e;
assert e :> A<Int, Bool> == null;
assert e :> B<Int, Float> == e;
assert e :> B<Int, Bool> == null;
assert e :> D == e;
assert e :> E<Int> == e;
assert e :> E<Float> == null;
