// @FAIL-WASM

// Initialization

{
  class A() {
    func bar() : Int { return 10 };
    func foo() : Int { bar() };
    var v0 : Int = foo();
  };

  class B() <: A() {
    var v1 : Int = foo();
    func bar() : Int { return 20 };
    var v2 : Int = foo();
  };

  let o = new B();
  assert o.v0 == 20;
  assert o.v1 == 20;
  assert o.v2 == 20;
};

{
  class A() {
    func bar() : Int { return 10 };
    func foo() : Int { bar() };
    var v0 : Int = foo();
  };

  class B() <: A() {
    var v1 : Int = foo();
    let a = 20;
    var v2 : Int = foo();
    func bar() : Int { return a };
    var v3 : Int = foo();
  };

  let o = new B();
  assert o.v0 == 20;
  assert o.v1 == 20;
  assert o.v2 == 20;
  assert o.v3 == 20;
};

{
  class A() {
    func bar() : Int { return 10 };
    func foo() : Int { bar() };
    var v0 : Int = foo();
  };

  class B() <: A() {
    var v1 : Int = foo();
    var a : Int = 20;
    var v2 : Int = foo();
    func bar() : Int { return a };
    var v3 : Int = foo();
  };

  let o = new B();
  assert o.v0 == 0;
  assert o.v1 == 0;
  assert o.v2 == 20;
  assert o.v3 == 20;
};

{
  class A() {
    func bar() : Int { return 10 };
    func foo() : Int { bar() };
    var v0 : Int = foo();
  };

  class B() <: A() {
    var v1 : Int = foo();
    func bar() : Int { return this.a };
    var v2 : Int = foo();
    let a = 20;
    var v3 : Int = foo();
  };

  let o = new B();
  assert o.v0 == 20;
  assert o.v1 == 20;
  assert o.v2 == 20;
  assert o.v3 == 20;
};

{
  class A() {
    func bar() : Int { return 10 };
    func foo() : Int { bar() };
    var v0 : Int = foo();
  };

  class B() <: A() {
    var v1 : Int = foo();
    func bar() : Int { return this.a };
    var v2 : Int = foo();
    var a : Int = 20;
    var v3 : Int = foo();
  };

  let o = new B();
  assert o.v0 == 0;
  assert o.v1 == 0;
  assert o.v2 == 0;
  assert o.v3 == 20;
};
