// Generic functions

func foreach<T>(a : T[], n : Int, f : T -> ()) {
  var i : Int = 0;
  while (i < n) {
    f(a[i]);
    i := i + 1;
  }
};

let a = [1, 2, 5, 6, -8];

var sum : Int = 0;
foreach<Int>(a, 5, func(k : Int) { sum := sum + k });
assert sum == 6;

func fold<T, R>(a : T[], n : Int, x : R, f : (Int, T, R) -> R) : R {
  var i : Int = 0;
  var r : R = x;
  while (i < n) {
    r := f(i, a[i], r);
    i := i + 1;
  };
  return r;
};

let sum2 = fold<Int, Int>(a, 5, 0, func(i : Int, k : Int, r : Int) : Int { r + k });
assert sum2 == 6;


// Generic closure

func f<X>(x : X, f : <Y>(Y) -> Y) : (Int, X, Float) {
  let t = (1, x, 1e100);
  (f<Int>(t.0), f<X>(t.1), f<Float>(t.2));
};

let t = f<Bool>(false, func<T>(x : T) : T { x });
assert t.0 == 1;
assert !t.1;
assert t.2 == 1e100;
